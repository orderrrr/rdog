use rdog_lib::prelude::*;
use spirv_std::num_traits::Pow;

pub const HPI: f32 = PI * 0.5; // TODO move out

const RMAX: u32 = 300;
const TMAX: f32 = 22.0;

fn _robobo_1221_tonemap(color: Vec3) -> Vec3 {
    let l = color.length();

    let mut color = color;
    color = color.mix(color * 0.5, l / (l + 1.0));
    _r_t_operator(color)
}

#[inline]
fn _r_t_operator(x: Vec3) -> Vec3 {
    return x / (x * x + 1.0).sqrt();
}

fn cart_to_sphere(v: Vec3) -> Vec3 {
    let normalized = v.normalize();
    Vec3::new(
        normalized.z.atan2(normalized.x),
        normalized.y.asin(),
        v.length(),
    )
}

fn world_space_to_uv(world_pos: Vec3) -> Vec2 {
    let spherical = cart_to_sphere(world_pos);
    let ndc = Vec2::new(spherical.x / PI, spherical.y / HPI);
    (ndc + Vec2::ONE) * 0.5
}

fn render(
    pos: Vec4,

    camera: &Camera,

    el: f32,
    seed: UVec2,

    atmos_tx: Tex<'_>,
    atmos_sampler: &Sampler,
) -> Vec3 {
    let p = vec2(pos.x, camera.screen.y - pos.y);

    let uv = (2.0 * p - camera.screen.xy()) / camera.screen.y;

    let time = el * 0.5;

    let rotation_angle = time;
    let rotor = rotor_y(rotation_angle);

    // Calculate ro, rotating around y-axis
    let ro = rotate_vector(rotor, vec3(0.0, 1.0, -5.0));

    let f = 1.5;

    // Calculate rd, rotating the view direction
    let rd = (rotate_vector(rotor, vec3(uv.x, uv.y, f))).normalize();

    let r = Ray::new(ro, rd);

    get_color(r, pos.xy(), camera, el, seed, atmos_tx, atmos_sampler)
}

fn translate_to_ws(d: Vec3, n: Vec3) -> Vec3 {
    let r = if n.x.abs() > n.y.abs() {
        vec3(n.z, 0.0, -n.x) / ((n.x * n.x) + (n.z * n.z)).sqrt()
    } else {
        vec3(0.0, -n.z, n.y) / ((n.y * n.y) + (n.z * n.z)).sqrt()
    };

    let f = n.cross(r);

    return vec3(
        (d.x * f.x) + (d.y * n.x) + (d.z * r.x),
        (d.x * f.y) + (d.y * n.y) + (d.z * r.y),
        (d.x * f.z) + (d.y * n.z) + (d.z * r.z),
    );
}

fn spherical_light_sample(cl: Light, p: Vec3, uv: Vec2, camera: &Camera, seed: u32) -> Vec3 {
    let u0 = rng01(uv.xy() + vec2(2.0, 3.0), seed, camera.screen.x as u32).c(0.0, 1.0);
    let u1 = rng01(uv.yx() - vec2(1.0, 1.0), seed, camera.screen.x as u32).c(0.0, 1.0);

    let d = (cl.pos - p).length();
    let lv = (cl.pos - p) / d;

    let sin_theta_max_sq = (cl.radius * cl.radius) / (d * d);
    let cos_theta_max = (1.0 - sin_theta_max_sq).max(0.0).sqrt();

    let cos_theta = (u0 * cos_theta_max) + (1.0 - u0);
    let sin_theta = (1.0 - (cos_theta * cos_theta)).max(0.0).sqrt();
    let phi = u1 * 2.0 * PI;

    let sample_direction = vec3(phi.cos() * sin_theta, cos_theta, phi.sin() * sin_theta);

    translate_to_ws(sample_direction, lv)
}

fn t(s: f32) -> Vec3 {
    Vec3::new(0.233, 0.455, 0.649) * (-s * s / 0.0064).exp()
        + Vec3::new(0.1, 0.336, 0.344) * (-s * s / 0.0484).exp()
        + Vec3::new(0.118, 0.198, 0.0) * (-s * s / 0.187).exp()
        + Vec3::new(0.113, 0.007, 0.007) * (-s * s / 0.567).exp()
        + Vec3::new(0.358, 0.004, 0.0) * (-s * s / 1.99).exp()
        + Vec3::new(0.078, 0.0, 0.0) * (-s * s / 7.41).exp()
}

fn sample_direct_diff_spherical(
    p: Vec3,
    n: Vec3,
    uv: Vec2,
    camera: &Camera,
    el: f32,
    seed: UVec2,
) -> Vec3 {
    let cl = light_map(p, el, seed);

    // assumed spherical
    let l = spherical_light_sample(cl, p, uv, camera, seed.y);

    let cos_theta = n.dot(l);
    if cos_theta < 0.0 {
        return Vec3::ZERO;
    }

    let lsr = Ray::new(p + l, l);
    let hit = hit(lsr, el, seed);

    let attenuation = hit.dist / cl.radius + 0.5; // direct light attenuation factor

    if hit.emissive > 0.0 {
        hit.albedo * cos_theta / (attenuation * attenuation)
    } else {
        Vec3::ZERO
    }
}

fn spec_brdf(
    pos: Vec3,
    v: Vec3,
    n: Vec3,
    roughness: f32,
    f0: f32,
    uv: Vec2,
    fresnel: &mut f32,
    atmos_tx: Tex<'_>,
    atmos_sampler: &Sampler,
    camera: &Camera,
    el: f32,
    seed: UVec2,
) -> Vec3 {
    let mut specular_light = Vec3::ZERO;

    let alpha = roughness * roughness;
    let alpha2 = alpha * alpha;
    let k_direct = (alpha2 + 1.0) / 8.0;
    let k_ibl = alpha / 2.0;

    for i in 0..BRDF_STEPS + 1 {
        let h = sample_brdf(n, alpha2, uv + vec2(1.220, 2.530), camera, el, seed + i + 5);
        let v_dot_h = v.dot(h).max(0.000001);
        let l = (2.0 * v_dot_h) * (h - v);
        let n_dot_v = n.dot(v).max(0.0);
        let n_dot_l = n.dot(l);
        let n_dot_h = n.dot(h).max(0.0);

        if n_dot_l > 0.0 {
            let sr = Ray::new(pos, l);

            let hit = hit(sr, el, seed);

            let in_radiance = if hit.dist >= TMAX || hit.emissive > 0.0 {
                sample_atmos(sr, atmos_tx, atmos_sampler)
            } else {
                hit.albedo
                    * (sample_direct_diff_spherical(
                        pos + (l * hit.dist),
                        hit.normal,
                        uv + vec2(1.2377, 1.2377),
                        camera,
                        el,
                        seed + i + 10,
                    ) + sample_indirect_diff(
                        pos + (l * hit.dist),
                        hit.normal,
                        uv + vec2(3.223, 3.225),
                        camera,
                        el,
                        seed + i + 10,
                        atmos_tx,
                        atmos_sampler,
                    ))
            };

            *fresnel = f0 + (1.0 - f0) * (1.0 - n_dot_v).pow(5.0);
            let g_term = g_term_schlick_ggx(n_dot_v, n_dot_l, k_ibl);
            specular_light += in_radiance * (g_term * *fresnel * v_dot_h / (n_dot_h * n_dot_v));
        }

        let cl = light_map(pos, el, seed);
        let l = spherical_light_sample(cl, pos, uv, camera, seed.y + i);
        let h = (v + l) / (v + l).length();
        let n_dot_l = n.dot(l);
        let n_dot_h = n.dot(h).max(0.0);

        if n_dot_l > 0.0 {
            let sr = Ray::new(pos, l);
            let hit = hit(sr, el, seed);

            if hit.emissive > 0.0 {
                let attn = 1.0 / (hit.dist * hit.dist);
                let in_radiance = hit.albedo * hit.emissive * attn;
                let d_term = d_term_ggxtr(n_dot_h, alpha);
                let g_term = g_term_schlick_ggx(n_dot_v, n_dot_l, k_direct);
                specular_light += in_radiance * g_term * *fresnel * d_term / (4.0 / n_dot_v);
            }
        }
    }

    specular_light / BRDF_STEPS as f32
}

fn d_term_ggxtr(n_dot_h: f32, alpha: f32) -> f32 {
    let alpha = n_dot_h * alpha;
    let kappa = alpha / (n_dot_h * n_dot_h * (alpha * alpha - 1.0) + 1.0);
    kappa * kappa / PI
}

fn g_term_schlick_ggx(n_dot_v: f32, n_dot_l: f32, k: f32) -> f32 {
    let g_term_v = n_dot_v / (n_dot_v * (1.0 - k) + k);
    let g_term_l = n_dot_l / (n_dot_l * (1.0 - k) + k);
    g_term_v * g_term_l
}

fn sample_atmos(sr: Ray, atmos_tx: Tex<'_>, atmos_sampler: &Sampler) -> Vec3 {
    Vec3::splat(0.01)
    // sample(
    //     atmos_tx,
    //     atmos_sampler,
    //     world_space_to_uv(sr.o + sr.d * 1000.0) + vec2(0.0, 0.02),
    // )
    // .xyz()
}

fn sample_brdf(normal: Vec3, alpha2: f32, uv: Vec2, camera: &Camera, el: f32, seed: UVec2) -> Vec3 {
    let u0 = rng01(uv.xy() + vec2(0.0, 0.0), seed.y, camera.screen.y as u32);
    let u1 = rng01(uv.yx() + vec2(1.3, 2.7), seed.y, camera.screen.y as u32);

    let cos_theta = ((1.0 - u0) / ((alpha2 - 1.0) * u0 + 1.0)).sqrt();
    let sin_theta = ((1.0 - (cos_theta * cos_theta)).max(0.0)).sqrt();
    let phi = u1 * 2.0 * PI;

    translate_to_ws(
        vec3(phi.cos() * sin_theta, cos_theta, phi.sin() * sin_theta),
        normal,
    )
}

fn sample_scattering(pos: Vec3, n: Vec3, uv: Vec2, camera: &Camera, el: f32, seed: UVec2) -> Vec3 {
    let p1 = pos - (n * 0.02);

    let cl = light_map(p1, el, seed);

    let mut out = Vec3::ZERO;

    for i in 0..SCATTER_STEPS {
        let l = spherical_light_sample(cl, p1, uv, camera, seed.y + i);

        // let p1 = p1 + l;

        let sr = Ray::new(p1, l);
        let h = hit_transparrent(sr, el, seed);

        let sr = Ray::new(p1 + (l * h.dist) + (0.03 * l), l);

        let h1 = hit(sr, el, seed);

        if h1.emissive > 0.0 {
            let scale = 3.0;
            let bias = 0.01;

            let n1 = -h1.normal;
            let cos_theta = n1.dot(l);
            let s = scale * (h.dist + bias);

            let e = (0.3 + cos_theta).max(0.0);

            let a = 1.0 / (h1.dist * h1.dist);

            out += t(s) * e * a * (h1.albedo * h1.emissive);
        }
    }

    out / (SCATTER_STEPS as f32)
}

fn sample_indirect_diff(
    p: Vec3,
    n: Vec3,
    uv: Vec2,
    camera: &Camera,
    el: f32,
    seed: UVec2,
    atmos_tx: Tex<'_>,
    atmos_sampler: &Sampler,
) -> Vec3 {
    let mut t = Vec3::ZERO;
    let mut albedo = Vec3::splat(1.0);
    let mut p = p;
    let mut n = n;

    for i in 0..DIFFUSE_STEPS {
        let l = translate_to_ws(get_random_sample(uv + (i as f32), camera, el, seed), n);
        let cos_theta = n.dot(l);
        let sr = Ray::new(p + l, l);
        let h = hit(sr, el, seed);

        // TODO put sampling into some kind of helper
        if h.dist >= TMAX {
            t += albedo * sample_atmos(sr, atmos_tx, atmos_sampler);
            // continue;
            break;
        }

        // // todo && i > 0??
        if h.emissive > 0.0 && i > 0 {
            t += albedo * cos_theta;
            // continue;
            break;
        }

        albedo *= h.albedo;
        n = h.normal;
        p = sr.o + sr.d * h.dist;
        t += albedo * cos_theta * sample_direct_diff_spherical(p, n, uv, camera, el, seed);
    }

    return t;
}

fn get_random_sample(uv: Vec2, camera: &Camera, el: f32, seed: UVec2) -> Vec3 // cosine weighted uniform distribution
{
    let cos_theta = (1.0 - rng01(uv.xy(), seed.y, camera.screen.y as u32)).sqrt();
    let sin_theta = (1.0 - (cos_theta * cos_theta)).max(0.0).sqrt();
    let phi = rng01(uv.yx(), seed.y, camera.screen.y as u32) * 2.0 * PI;

    return vec3((phi).cos() * sin_theta, cos_theta, (phi).sin() * sin_theta);
}

fn get_color(
    r: Ray,
    uv: Vec2,
    camera: &Camera,
    el: f32,
    seed: UVec2,
    atmos_tx: Tex<'_>,
    atmos_sampler: &Sampler,
) -> Vec3 {
    let res = hit(r, el, seed);

    if res.dist >= TMAX {
        return sample_atmos(r, atmos_tx, atmos_sampler);
    }

    if res.id > 900.0 {
        return res.albedo;
    }

    // let mut diffuse = Vec3::ZERO;
    // let mut scattering = Vec3::ZERO;
    let mut specular = Vec3::ZERO;
    let mut fresnel = 0.0;

    let v = -r.d;
    let pos = r.o + r.d * res.dist;

    // if res.diffuse_scale > 0.0 {
    //     diffuse = res.diffuse_scale
    //         * res.albedo
    //         * (sample_direct_diff_spherical(pos, res.normal, uv, camera, el, seed)
    //             + sample_indirect_diff(
    //                 pos,
    //                 res.normal,
    //                 uv,
    //                 camera,
    //                 el,
    //                 seed,
    //                 atmos_tx,
    //                 atmos_sampler,
    //             ));
    // }
    //
    // if res.scattering_scale > 0.0 {
    //     scattering = res.scattering_scale
    //         * res.scattering_color
    //         * sample_scattering(pos, res.normal, uv + vec2(1.325, 2.4), camera, el, seed);
    // }

    if res.specular_scale > 0.0 {
        specular = res.specular_scale
            * spec_brdf(
                pos,
                v,
                res.normal,
                res.roughness,
                res.f0,
                uv - vec2(1.0, 1.0),
                &mut fresnel,
                atmos_tx,
                atmos_sampler,
                camera,
                el,
                seed,
            );
    }

    return specular;
}

fn hit_transparrent(r: Ray, el: f32, seed: UVec2) -> Material {
    // TODO - change to a Material struct
    let mut t = 0.0;

    for _ in 0..RMAX {
        let p = r.o + t * r.d;

        let mut h = map(p, el, seed);
        h.x *= -1.0;

        if h.x < 0.002 {
            return lookup_mat(r, p, h, t, el, seed);
        }

        if t > TMAX {
            break;
        }

        t += h.x
    }

    Material::default()
}

fn hit(r: Ray, el: f32, seed: UVec2) -> Material {
    // TODO - change to a Material struct
    let mut t = 0.0;

    for _ in 0..RMAX {
        let p = r.o + t * r.d;

        let h = map(p, el, seed);

        if h.x < 0.001 {
            return lookup_mat(r, p, h, t, el, seed);
        }

        if t > TMAX {
            break;
        }

        t += h.x
    }

    Material::default()
}

fn srgb(channel: f32) -> f32 {
    if channel <= 0.00031308 {
        channel * 12.92
    } else {
        1.055 * channel.pow(1.0 / 2.4) - 0.055
    }
}

#[spirv(fragment)]
pub fn fs(
    #[spirv(frag_coord)] pos: Vec4,

    #[spirv(descriptor_set = 0, binding = 0, uniform)] camera: &Camera,
    #[spirv(descriptor_set = 0, binding = 1, uniform)] globals: &Globals,
    #[spirv(descriptor_set = 1, binding = 0)] atmos_tx: Tex<'_>,
    #[spirv(descriptor_set = 1, binding = 1)] atmos_sampler: &Sampler,
    output: &mut Vec4,
) {
    let mut col: Vec3 = render(
        pos,
        camera,
        globals.time.x,
        globals.seed,
        atmos_tx,
        atmos_sampler,
    );

    // col = vec3(srgb(col.x), srgb(col.y), srgb(col.z));
    // todo figure out how to improve tone mapping
    // col = col.pow(1.0 / 2.2);
    // col = robobo_1221_tonemap(col);
    // col = col.pow(2.2);

    col = col.clamp(Vec3::ZERO, Vec3::ONE);

    *output = col.extend(1.0);
}

#[spirv(vertex)]
pub fn vs(#[spirv(vertex_index)] vert_idx: i32, #[spirv(position)] output: &mut Vec4) {
    fn full_screen_triangle(vert_idx: i32) -> Vec4 {
        let uv = vec2(((vert_idx << 1) & 2) as f32, (vert_idx & 2) as f32);
        let pos = 2.0 * uv - Vec2::ONE;

        pos.extend(0.0).extend(1.0)
    }

    *output = full_screen_triangle(vert_idx);
}
